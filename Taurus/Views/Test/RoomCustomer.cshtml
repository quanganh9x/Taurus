@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Room</title>


    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css">


    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css">
    <link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/malihu-custom-scrollbar-plugin/3.1.5/jquery.mCustomScrollbar.min.css'>
    <link rel="stylesheet" href="~/lib/jqueryui/themes/ui-lightness/jquery-ui.min.css" />
    <link rel="stylesheet" href="~/css/room.css">
    <link rel="stylesheet" href="~/lib/toasty.js/dist/toasty.min.css" />


    <script src='~/lib/jquery/dist/jquery.min.js'></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/malihu-custom-scrollbar-plugin/3.1.5/jquery.mCustomScrollbar.concat.min.js'></script>
    <script src="~/lib/jqueryui/jquery-ui.min.js"></script>


    <script src="~/lib/webrtc-adapter/adapter.min.js"></script>
    <script src="~/lib/rtcmulticonnection/dist/RTCMultiConnection.min.js"></script>
    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
    <script src="~/lib/socket.io/socket.io.js"></script>
    <script src="~/js/FileBufferReader.min.js"></script>
    <script src="~/lib/RecordRTC/RecordRTC.min.js"></script>
    <script>
        $(document).ready(function () {
            window.toast = new Toasty();
            var $messages = $('.messages-content'),
                d, h, m,
                i = 0;

            $(window).on("load", function () {
                $messages.mCustomScrollbar();
            });


            function updateScrollbar() {
                $messages.mCustomScrollbar("update").mCustomScrollbar('scrollTo', 'bottom', {
                    scrollInertia: 10,
                    timeout: 0
                });
            }

            function setDate() {
                d = new Date()
                m = d.getMinutes();
                $('<div class="timestamp">' + d.getHours() + ':' + m + '</div>').appendTo($('.message:last'));
            }

            function insertMessage() {
                msg = $('.message-input').val();
                if ($.trim(msg) == '') {
                    return false;
                }
                $('<div class="message message-personal">' + msg + '</div>').appendTo($('.mCSB_container')).addClass('new');
                setDate();
                $('.message-input').val(null);
                updateScrollbar();

                connection.send({
                    chatMessage: msg
                });
                connection.send({
                    typing: false
                });
            }

            function appendMessage(msg) {
                $('<div class="message new">' + msg + '</div>').appendTo($('.mCSB_container')).addClass('new');
                setDate();
                updateScrollbar();
            }

            $(window).on('keydown', function (e) {
                if (e.which == 13) {
                    insertMessage();
                    return false;
                }
            })


            function showIndicator() {
                $('<div class="message loading new"><span></span></div>').appendTo($('.mCSB_container'));
                updateScrollbar();
            }

            function hideIndicator() {
                $('.message.loading').remove();
                updateScrollbar();
            }


            $('#show-menu').click(function () {
                $('.menu .items span').toggleClass('active');
                $('.menu #fuck').toggleClass('active');
            });

            $('#fade-button').click(function (e) {
                e.preventDefault();
                $('#chat-box').fadeOut("fast", function () {
                    $('#chat-bar').fadeIn("fast");
                });
            });

            $('#chat-bar').on("click", function () {
                $('#chat-bar').fadeOut("fast", function () {
                    $('#chat-box').fadeIn("fast");
                });
            })

            var ourVideo = document.getElementById("our-video-mb");
            var theirVideo = document.getElementById('their-video-mb');

            // shim
            window.adapter = true;

            var connection = new RTCMultiConnection();
            //connection.socketURL = 'http://35.247.52.75:9000/';
            connection.socketURL = 'https://rtcmulticonnection.herokuapp.com:443/';

            /* initializers */
            connection.userid = "someoneother";
            connection.roomid = "room0";
            connection.mysessionid = "session0";
            connection.extra = {
                userId: connection.userid,
                roomId: connection.roomid,
                userFullName: "mr Potato",
                isRoomMaster: false
            };
            connection.socketMessageEvent = "event-" + connection.roomid;

            connection.DetectRTC.load(function () {
                //if (connection.DetectRTC.isWebRTCSupported === false || connection.DetectRTC.hasMicrophone === false || connection.DetectRTC.hasWebcam === false || connection.DetectRTC.hasSpeakers === false) {
                //    // alert('You dont fulfill requirements or your browser doesnt support WebRTC');
                //    handleError("not-supported");
                //    return;
                //}

                connection.checkPresence(connection.roomid, function (isRoomExist, roomid, error) {
                    if (!isRoomExist) {
                        handleError("room-not-exist");
                        return;
                    }

                    connection.join(connection.roomid, function (isRoomJoined, roomid, error) {
                        if (!isRoomJoined) {
                            handleError("not-joined");
                            return;
                        }
                        else {

                        }
                    });
                });
            });

            // connection.autoCloseEntireSession = true;
            // connection.maxParticipantsAllowed = 1000;
            connection.enableFileSharing = true;

            connection.session = {
                audio: true,
                video: true,
                data: true
            };

            connection.mediaConstraints = {
                audio: {
                    mandatory: {
                        echoCancellation: true,
                        googAutoGainControl: true,
                        googNoiseSuppression: true,
                        googHighpassFilter: true,
                        googTypingNoiseDetection: true,
                        //googAudioMirroring: true
                    },
                    optional: []
                },
                video: true
            };

            if (connection.DetectRTC.browser.name == "Firefox") {
                connection.mediaConstraints = {
                    audio: true,
                    video: true
                };
            }

            connection.sdpConstraints.mandatory = {
                OfferToReceiveAudio: true,
                OfferToReceiveVideo: true
            };

            connection.onEvent = function (event) {
                console.log("event: " + event);
            };

            connection.onopen = function (event) {
                connection.onEvent(event);
            };

            connection.onclose = connection.onleave = connection.onerror = function (event) {
                connection.onEvent(event);
                handleError("an-error-occurred");
            };


            connection.onmessage = function (event) {
                if (event.data.typing === true) {
                    showIndicator();
                    return;
                }

                if (event.data.typing === false) {
                    hideIndicator();
                    return;
                }

                if (event.data.chatMessage) {
                    appendMessage(event.data.chatMessage);
                    return;
                }
            };

            var myStream;
            var theirStream;

            connection.onstream = function (event) {
                var element = null;

                if (event.type == 'local') {
                    myStream = event.stream;
                    element = ourVideo;
                    element.muted = true;
                    element.volume = 0;
                    element.controls = false;
                } else {
                    theirStream = event.stream;
                    element = theirVideo;
                    element.controls = false;
                    addModeration();
                }
                element.srcObject = event.stream;
                element.setAttribute("streamid", event.streamid);
                element.play();

                connection.onEvent(event);
            };

            connection.onstreamended = function (event) {
                console.log(event);
                var element = $(`video[streamid='${event.streamid}']`);
                element.removeAttribute('srcObject');
                element.removeAttribute('streamid');

                connection.onEvent(event);
                return;
            };

            var keyPressTimer;
            var numberOfKeys = 0;
            $('.message-input').on("keyup", function (e) {
                var chatMessage = $('.message-input').val();
                if (!chatMessage || !chatMessage.replace(/ /g, '').length) {
                    connection.send({
                        typing: false
                    });
                }
                clearTimeout(keyPressTimer);
                numberOfKeys++;

                if (numberOfKeys % 3 === 0) {
                    connection.send({
                        typing: true
                    });
                }

                keyPressTimer = setTimeout(function () {
                    connection.send({
                        typing: false
                    });
                }, 1200);
            })

            $(".message-submit").on("click", function () {
                insertMessage();
            });

            function getFullName() {
                if (connection.peers[0].extra.userFullName) {
                    _userFullName = connection.peers[0].extra.userFullName;
                }
                return _userFullName;
            }


            var recentFile;
            $('.message-upload').on("click", function () {
                var file = new FileSelector();
                file.selectSingleFile(function (file) {
                    recentFile = file;

                     if (connection.getAllParticipants().length >= 1) {
                         recentFile.userIndex = 0;
                         connection.send(file, connection.getAllParticipants()[recentFile.userIndex]);
                     }
                });
            });

            function getFileHTML(file) {
                var url = file.url || URL.createObjectURL(file);
                var attachment = '<a href="' + url + '" target="_blank" download="' + file.name + '"><b>' + file.name + '</b></a>';
                return attachment;
            }

            connection.onFileStart = function (file) {

            };

            connection.onFileProgress = function (file) {

            }

            connection.onFileEnd = function (file) {
                if (file.userid === connection.userid) {
                    insertMessage(getFileHTML(file));
                    // if (recentFile) {
                    //     recentFile.userIndex++;
                    //     var nextUserId = connection.getAllParticipants()[recentFile.userIndex];
                    //     if (nextUserId) {
                    //         connection.send(recentFile, nextUserId);
                    //     }
                    //     else {
                    //         recentFile = null;
                    //     }
                    // }
                    // else {
                    //     recentFile = null;
                    // }
                }
            };

            connection.autoSaveToDisk = false;


            window.addEventListener('unload', function () {
                endSession();
            })

            function handleError(error) {
                clearInterval(updateHeartbeat);
                endSession();
                window.toast.error(error);
                //setTimeout(function () {
                //    location.href = "/";
                //}, 3000);
            }

            var updateHeartbeat;

            function activeSession() {
                
            }

            function updateSession() {
                
            }

            function endSession() {
                
            }

            var recorder;
            var videoOnlyStream;
            window.blobs = [];
            function moderationProcess() {
                var form = new FormData();
                form.append("blob", window.blobs[0]); // ensure we dont miss any scenes
                window.blobs.shift();
                
            }

            function addModeration() {
                videoOnlyStream = new MediaStream();
                myStream.getVideoTracks().forEach(function (track) {
                    videoOnlyStream.addTrack(track);
                })
                recorder = RecordRTC(videoOnlyStream, {
                    type: 'video',
                    recorderType: MediaStreamRecorder,
                    mimeType: 'video/webm',
                    timeSlice: 30000, // slice the blob
                    ondataavailable: function (blob) {
                        window.blobs.push(blob);
                        moderationProcess();
                    }
                });
                recorder.startRecording();
            }

            function endModeration() {
                // recording
                recorder.stopRecording();
                videoOnlyStream.stop();
                videoOnlyStream = null;
                recorder = null;
                window.blobs.length = 0;
            }

            var sec = 0;
            function pad(val) { return val > 9 ? val : "0" + val; }

            $("#end-room").on("click", function () {
                endSession();
                window.toast.warning("You will be redirected back in 3 seconds");
                setTimeout(function () {
                    location.href = "/";
                }, 3000);
            });

            $("#mute-room").on("click", function () {
                theirStream.getAudioTracks()[0].enabled = false;
                if (($("#unmute-room").is(":hidden"))) {
                    $("#unmute-room").prop("hidden", false);
                    $("#mute-room").prop("hidden", true);
                }
            });

            $("#unmute-room").on("click", function () {
                theirStream.getAudioTracks()[0].enabled = true;
                if (($("#mute-room").is(":hidden"))) {
                    $("#mute-room").prop("hidden", false);
                    $("#unmute-room").prop("hidden", true);
                }
            });
        });

    </script>

</head>
<body>
    <div class="container-fluid" style="height: auto; padding: 0;">
                <video autoplay playsinline id="their-video-mb" style="height: 100vh;"></video>
            </div>
            <div style=" border:1px solid white; max-width:50%;min-width:50%;min-height:36%;max-height:36%; position:absolute; right:0; bottom:0; z-index:1;">
                <video autoplay playsinline id="our-video-mb" muted></video>
            </div>

            <section id="chat-box" class="avenue-messenger">
                <div class="menu">

                    <div class="button" id="fade-button">&mdash;</div>
                </div>
                <div class="chat">
                    <div class="chat-title" style="padding-top:20px; padding-bottom: 20px;">
                        <h1 class="chat-username">Chat Box</h1>
                    </div>
                    <div class="messages">
                        <div class="messages-content"></div>
                    </div>
                    <div class="message-box">
                        <textarea type="text" class="message-input" placeholder="Type message..."></textarea>
                        <button type="submit" class="message-submit">Send</button>
                        <button class="message-submit message-upload"><i class="fa fa-upload"></i></button>
                    </div>
                </div>

            </section>

            <div id="chat-bar" class="avenue-messenger-widget-mb d-flex justify-content-center align-items-center" style="display: none;">
                
                <i class="fa fa-2x fa-comment-o"></i>
            </div>
    <script src="~/lib/toasty.js/dist/toasty.min.js"></script>
</body>
</html>
