@{
    Layout = null;
    Customer u = ViewData["User"] as Customer;
    Room r = ViewData["Room"] as Room;
    Session s = ViewData["Session"] as Session;
}

<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Room</title>


    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css">


    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css">
    <link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/malihu-custom-scrollbar-plugin/3.1.5/jquery.mCustomScrollbar.min.css'>
    <link rel="stylesheet" href="~/css/room.css">
    <link rel="stylesheet" href="~/lib/toasty.js/dist/toasty.min.css" />

    <script src='~/lib/jquery/dist/jquery.min.js'></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/malihu-custom-scrollbar-plugin/3.1.5/jquery.mCustomScrollbar.concat.min.js'></script>


    <script src="~/lib/webrtc-adapter/adapter.min.js"></script>
    <script src="~/lib/rtcmulticonnection/dist/RTCMultiConnection.min.js"></script>
    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
    <script src="~/lib/socket.io/socket.io.js"></script>
    <script src="~/js/FileBufferReader.min.js"></script>
    <script src="~/lib/RecordRTC/RecordRTC.min.js"></script>
    <script>
        $(document).ready(function () {
            window.toast = new Toasty();

            var $messages = $('.messages-content'),
                d, h, m,
                i = 0;
            
            $messages.mCustomScrollbar();

            function updateScrollbar() {
                $messages.mCustomScrollbar("update").mCustomScrollbar('scrollTo', 'bottom', {
                    scrollInertia: 10,
                    timeout: 0
                });
            }            

            function setDate() {
                d = new Date()
                m = d.getMinutes();
                $('<div class="timestamp">' + d.getHours() + ':' + m + '</div>').appendTo($('.message:last'));
            }

            function insertMessage() {
                var msg = $('.message-input').val();
                if ($.trim(msg) == '') {
                    return false;
                }
                $('<div class="message message-personal">' + msg + '</div>').appendTo($('.mCSB_container')).addClass('new');
                setDate();
                $('.message-input').val(null);
                updateScrollbar();

                connection.send({
                    chatMessage: msg
                });
            }

            function insertFile(msg) {
                $('<div class="message message-personal">' + msg + '</div>').appendTo($('.mCSB_container')).addClass('new');
                setDate();
                $('.message-input').val(null);
                updateScrollbar();
            }

            function appendMessage(msg) {
                $('<div class="message new">' + msg + '</div>').appendTo($('.mCSB_container')).addClass('new');
                setDate();
                updateScrollbar();
            }

            $(window).on('keydown', function (e) {
                if (e.which == 13) {
                    insertMessage();
                    return false;
                }
            })


            $('#show-menu').click(function () {
                $('.menu .items span').toggleClass('active');
                $('.menu #fuck').toggleClass('active');
            });

            $('#fade-button').click(function (e) {
                e.preventDefault();
                $('#chat-box').fadeOut("fast", function () {
                    $('#chat-bar').fadeIn("fast");
                });
            });

            $('#chat-bar').on("click", function () {
                $('#chat-bar').fadeOut("fast", function () {
                    $('#chat-box').fadeIn("fast");
                });
            })

            var ourVideo = document.getElementById("our-video");
            var theirVideo = document.getElementById('their-video');

            // shim
            window.adapter = true;

            var connection = new RTCMultiConnection();
            //connection.socketURL = 'http://35.247.52.75:9000/';
            connection.socketURL = 'https://rtcmulticonnection.herokuapp.com:443/';

            /* initializers */
            connection.userid = @u.UserId;
            connection.roomid = @r.Id;
            connection.mysessionid = @s.Id;
            connection.extra = {
                userId: connection.userid,
                roomId: connection.roomid,
                userFullName: "@u.User.FullName",
                isRoomMaster: false
            };
            connection.socketMessageEvent = "event-" + connection.roomid;

            connection.DetectRTC.load(function () {
                if (connection.DetectRTC.isWebRTCSupported === false || connection.DetectRTC.hasMicrophone === false || connection.DetectRTC.hasWebcam === false || connection.DetectRTC.hasSpeakers === false) {
                    alert('You dont fulfill requirements or your browser doesnt support WebRTC');
                    handleError("unsupported");
                    return;
                }

                if (navigator.connection &&
                    navigator.connection.type === 'cellular' &&
                    navigator.connection.downlinkMax <= 0.115) {
                    alert('Your connection is too slow for WebRTC to operate');
                    handleError("low-bandwidth");
                    return;
                }

                if (connection.DetectRTC.browser.name == "Safari") {
                    alert('You are using an unsupported browser. Please switch to Chrome or Firefox for the best performance');
                    handleError("unsupported");
                    return;
                }

                connection.checkPresence(connection.roomid, function (isRoomExist, roomid, error) {
                    if (!isRoomExist) {
                        handleError("room-not-exist");
                        return;
                    }

                    connection.join(connection.roomid, function (isRoomJoined, roomid, error) {
                        if (!isRoomJoined) {
                            handleError("not-joined");
                            return;
                        }
                        else {
                            activeSession();

                        }
                    });
                });
            });

            // connection.autoCloseEntireSession = true;
            // connection.maxParticipantsAllowed = 1000;
            connection.enableFileSharing = true;

            connection.session = {
                audio: true,
                video: true,
                data: true
            };

            connection.mediaConstraints = {
                audio: {
                    mandatory: {
                        echoCancellation: true,
                        googAutoGainControl: true,
                        googNoiseSuppression: true,
                        googHighpassFilter: true,
                        googTypingNoiseDetection: true,
                        //googAudioMirroring: true
                    },
                    optional: []
                },
                video: true
            };

            if (connection.DetectRTC.browser.name == "Firefox") {
                connection.mediaConstraints = {
                    audio: true,
                    video: true
                };
            }

            connection.sdpConstraints.mandatory = {
                OfferToReceiveAudio: true,
                OfferToReceiveVideo: true
            };

            connection.onEvent = function (event) {
                console.log(event);
            };

            connection.onopen = function (event) {
                connection.onEvent(event);
            };

            connection.onclose = connection.onleave = connection.onerror = function (event) {
                connection.onEvent(event);
                handleError("not-accepted");
            };


            connection.onmessage = function (event) {
                if (event.data.chatMessage) {
                    appendMessage(event.data.chatMessage);
                    return;
                }
            };

            var myStream;
            var theirStream;

            connection.onstream = function (event) {
                var element = null;

                if (event.type == 'local') {
                    myStream = event.stream;
                    element = ourVideo;
                    element.muted = true;
                    element.volume = 0;
                    element.controls = false;
                } else {
                    theirStream = event.stream;
                    element = theirVideo;
                    element.controls = false;
                    addModeration();
                }
                element.srcObject = event.stream;
                element.setAttribute("streamid", event.streamid);
                element.play();

                connection.onEvent(event);
            };

            connection.onstreamended = function (event) {
                var element = $(`video[streamid='${event.streamid}']`);
                element.removeAttribute('src');
                element.removeAttribute('srcObject');
                element.removeAttribute('streamid');
                theirStream = null;
                handleError("doctor-left");

                connection.onEvent(event);
            };



            $(".message-submit").on("click", function () {
                insertMessage();
            });

            function getFullName() {
                if (connection.peers[0].extra.userFullName) {
                    _userFullName = connection.peers[0].extra.userFullName;
                }
                return _userFullName;
            }

            $('.message-upload').on("click", function () {
                var file = new FileSelector();
                file.selectSingleFile(function (file) {
                    connection.send(file);
                    insertFile(getFileHTML(file));
                });
            });

            function getFileHTML(file) {
                var url = file.url || URL.createObjectURL(file);
                var attachment = '<a href="' + url + '" target="_blank" download="' + file.name + '"><b>' + file.name + '</b></a>';
                return attachment;
            }

            connection.onFileStart = function (file) {

            };

            connection.onFileProgress = function (file) {

            }

            connection.onFileEnd = function (file) {
                if (file.userid != connection.userid) {
                    appendMessage(getFileHTML(file));
                }
            };

            connection.autoSaveToDisk = false;


            window.addEventListener('unload', function () {
                endSession();
            })

            function handleError(error) {
                clearInterval(updateHeartbeat);
                endSession();
                window.toast.error(error);
                setTimeout(function () {
                    location.href = "/";
                }, 3000);
            }

            var updateHeartbeat;

            function activeSession() {
                $.post("@Url.Action("ActiveSession", "Session")", { id: connection.mysessionid })
                    .done(function (data) {
                        updateSession();
                        updateHeartbeat = setInterval(updateSession, 15000);
                        setInterval( function(){
                            $("#seconds").html(pad(++sec%60));
                            $("#minutes").html(pad(parseInt(sec/60,10)));
                        }, 1000);
                    })
                    .fail(function (data) {
                        handleError("api-error");
                    });
            }

            function updateSession() {
                $.post("@Url.Action("HbUpdateSession", "Session")", { id: connection.mysessionid })
                    .done(function (data) {
                    })
                    .fail(function (data) {
                        handleError("update-failed");
                    });
            }

            function endSession() {
                if (recorder != null) {
                    endModeration();
                }
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("EndSession", "Session")',
                    async: false,
                    data: { id: connection.mysessionid }
                });
            }

            var recorder;
            var videoOnlyStream;
            window.blobs = [];
            function moderationProcess() {
                var form = new FormData();
                form.append("blob", window.blobs[0]); // ensure we dont miss any scenes
                window.blobs.shift();
                $.ajax({
                    url: '@Url.Action("Moderation","Video")',
                    data: form,
                    processData: false,
                    contentType: false,
                    type: 'POST',
                    success: function (data) {
                        data = JSON.parse(data);
                        if (data.adult > 0.5 && data.wad > 0.5 && data.scam > 0.2) {
                            endSession();
                        }
                    }
                });
            }

            function addModeration() {
                videoOnlyStream = new MediaStream();
                myStream.getVideoTracks().forEach(function (track) {
                    videoOnlyStream.addTrack(track);
                })
                recorder = RecordRTC(videoOnlyStream, {
                    type: 'video',
                    recorderType: MediaStreamRecorder,
                    mimeType: 'video/webm',
                    timeSlice: 30000, // slice the blob
                    ondataavailable: function (blob) {
                        window.blobs.push(blob);
                        moderationProcess();
                    }
                });
                recorder.startRecording();
            }

            function endModeration() {
                // recording
                recorder.stopRecording();
                videoOnlyStream.stop();
                videoOnlyStream = null;
                recorder = null;
                window.blobs.length = 0;
            }

            var sec = 0;
            function pad(val) { return val > 9 ? val : "0" + val; }

            $("#end-room").on("click", function () {
                endSession();
                window.toast.warning("You will be redirected back in 3 seconds");
                setTimeout(function () {
                    location.href = "/";
                }, 3000);
            });

            $("#mute-room").on("click", function () {
                theirStream.getAudioTracks()[0].enabled = false;
                if (($("#unmute-room").is(":hidden"))) {
                    $("#unmute-room").prop("hidden", false);
                    $("#mute-room").prop("hidden", true);
                }
            });

            $("#unmute-room").on("click", function () {
                theirStream.getAudioTracks()[0].enabled = true;
                if (($("#mute-room").is(":hidden"))) {
                    $("#mute-room").prop("hidden", false);
                    $("#unmute-room").prop("hidden", true);
                }
            });
        });

    </script>

</head>
<body>
    <div class="container-fluid">
        <div class="row video-container">
            <div class="col-md-9 col-12" style="height: 75%;">
                <video autoplay playsinline id="their-video"></video>
                <div class="row">
                    <div class="col-md-3 col-12">
                        <button class="btn btn-warning" id="mute-room" data-toggle="tooltip" data-placement="top" title="Mute-Room">
                            <i style="color:white" class="fa fa-volume-up" aria-hidden="true"></i>
                        </button>
                        <button hidden class="btn btn-warning" id="unmute-room" data-toggle="tooltip" data-placement="top" title="Unmute-Room">
                            <i style="color:white" class="fa fa-volume-off" aria-hidden="true"></i>
                        </button>
                        <button class="btn btn-danger" id="end-room" data-toggle="tooltip" data-placement="top" title="Close Room">
                            <i class="fa fa-times" aria-hidden="true"></i>
                        </button>
                    </div>
                    <div class="col-9" style="text-align: right;">
                        <a class="vote-btn" onclick="voteDoctor(this, @r.DoctorId, @s.Id)" data-toggle="tooltip" data-placement="top" title="Vote"><i class="fa fa-thumbs-o-up fa-2x text-muted"></i></a> &nbsp;
                        <a class="flag-btn" onclick="flagDoctor(this, @r.DoctorId, @s.Id)" data-toggle="tooltip" data-placement="top" title="Flag"><i class="fa fa-flag fa-2x text-muted"></i></a>

                        <script>
                            function voteDoctor(e, doctorId, sessionId) {
                                if (confirm("Do you want to vote for this doctor? ")) {
                                    $.post("@Url.Action("VoteDoctorRoom", "Vote")", { doctorId: doctorId, sessionId: sessionId })
                                        .done(function (resp) {
                                            $(e).addClass("voted");
                                            $(e).children().removeClass("text-muted");
                                            $(e).next().addClass("disabled");
                                        })
                                        .fail(function (resp) {
                                            window.toast.error("You have already voted")
                                        });
                                    return false;
                                }
                            }

                            function flagDoctor(e, doctorId, sessionId) {
                                if (confirm("Do you want to report this doctor? ")) {
                                    $.post("@Url.Action("FlagDoctorRoom", "Vote")", { doctorId: doctorId, sessionId: sessionId })
                                        .done(function (resp) {
                                            $(e).addClass("flagged");
                                            $(e).children().removeClass("text-muted");  
                                            $(e).prev().addClass("disabled");
                                        })
                                        .fail(function (resp) {
                                            window.toast.error("You have already voted")
                                        });
                                }
                            }
                        </script>
                    </div>
                </div>
            </div>
            <div class="col-md-3 col-12">
                <video autoplay playsinline id="our-video" muted></video>
                <style>
                    .control-box::-webkit-scrollbar {
                        display: none;
                    }
                </style>
                <div class="card card-body control-box" style="height:75%; overflow:scroll">
                    <h5>Room</h5>
                    <p>
                        <label>ID: </label>
                        <span>@r.Id</span>
                    </p>
                    <p>
                        <label>Price: </label>
                        <span>@r.Price</span>
                    </p>
                    <h5>Timer</h5>
                    <h3>
                        <span id="minutes"></span>:<span id="seconds"></span>
                    </h3>                                       
                </div>
            </div>
            <section id="chat-box" class="avenue-messenger">
                <div class="menu">

                    <div class="button" id="fade-button">&mdash;</div>
                </div>
                <div class="chat">
                    <div class="chat-title" style="padding-top:20px; padding-bottom: 20px;">
                        <h1 class="chat-username">Chat Box</h1>
                    </div>
                    <div class="messages">
                        <div class="messages-content"></div>
                    </div>
                    <div class="message-box">
                        <textarea type="text" class="message-input" placeholder="Type message..."></textarea>
                        <button type="submit" class="message-submit">Send</button>
                        <button class="message-submit message-upload"><i class="fa fa-upload"></i></button>
                    </div>
                </div>

            </section>

            <section id="chat-bar" class="avenue-messenger-widget" style="display: none; opacity: 0.7;">
                <div class="chat">
                    <div class="chat-title" style="padding-top:20px; padding-bottom: 20px;">
                        <h1 class="chat-username">Chat Box</h1>
                    </div>
                </div>
            </section>
        </div>
    </div>
    <script src="~/lib/toasty.js/dist/toasty.min.js"></script>
</body>
</html>
