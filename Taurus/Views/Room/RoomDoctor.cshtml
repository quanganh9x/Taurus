@{
    Layout = null;
    Doctor u = ViewData["User"] as Doctor;
    Room r = ViewData["Room"] as Room;
}

<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Room</title>


    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css">


    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css">
    <link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/malihu-custom-scrollbar-plugin/3.1.5/jquery.mCustomScrollbar.min.css'>
    <link rel="stylesheet" href="~/css/room.css">


    <script src='~/lib/jquery/dist/jquery.min.js'></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/malihu-custom-scrollbar-plugin/3.1.5/jquery.mCustomScrollbar.concat.min.js'></script>


    <script src="~/lib/webrtc-adapter/adapter.min.js"></script>
    <script src="~/lib/rtcmulticonnection/dist/RTCMultiConnection.min.js"></script>
    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
    <script src="~/lib/socket.io/socket.io.js"></script>
    <script src="~/js/FileBufferReader.min.js"></script>
    <script>
        $(document).ready(function () {


            var $messages = $('.messages-content'),
                d, h, m,
                i = 0;

            $(window).on("load", function () {
                $messages.mCustomScrollbar();
            });


            function updateScrollbar() {
                $messages.mCustomScrollbar("update").mCustomScrollbar('scrollTo', 'bottom', {
                    scrollInertia: 10,
                    timeout: 0
                });
            }

            function setDate() {
                d = new Date()
                m = d.getMinutes();
                $('<div class="timestamp">' + d.getHours() + ':' + m + '</div>').appendTo($('.message:last'));
            }

            function insertMessage(file) {
                console.log(file);
                if (file) msg = file;
                else msg = $('.message-input').val();
                if ($.trim(msg) == '') {
                    return false;
                }
                $('<div class="message message-personal">' + msg + '</div>').appendTo($('.mCSB_container')).addClass('new');
                setDate();
                $('.message-input').val(null);
                updateScrollbar();

                connection.send({
                    chatMessage: msg
                });
                connection.send({
                    typing: false
                });
            }

            function appendMessage(msg) {
                $('<div class="message new">' + msg + '</div>').appendTo($('.mCSB_container')).addClass('new');
                setDate();
                updateScrollbar();
            }

            $(window).on('keydown', function (e) {
                if (e.which == 13) {
                    insertMessage();
                    return false;
                }
            })


            function showIndicator() {
                $('<div class="message loading new"><span></span></div>').appendTo($('.mCSB_container'));
                updateScrollbar();
            }

            function hideIndicator() {
                $('.message.loading').remove();
                updateScrollbar();
            }


            $('#show-menu').click(function () {
                $('.menu .items span').toggleClass('active');
                $('.menu #fuck').toggleClass('active');
            });

            $('#fade-button').click(function (e) {
                e.preventDefault();
                $('.avenue-messenger').fadeOut(300);
            });

            var ourVideo = document.getElementById("our-video");
            var theirVideo = document.getElementById('their-video');
            var listSession = $('#listsession');

            // shim
            window.adapter = true;

            var connection = new RTCMultiConnection();
            //connection.socketURL = 'http://35.247.52.75:9000/';
            connection.socketURL = 'https://rtcmulticonnection.herokuapp.com:443/';

            connection.userid = @u.UserId;
            connection.roomid = @r.Id;
            connection.extra = {
                userId: connection.userid,
                roomId: connection.roomid,
                userFullName: "@u.User.FullName",
                isRoomMaster: true
            };
            connection.socketMessageEvent = "event-" + connection.roomid;

            connection.DetectRTC.load(function () {
                if (connection.DetectRTC.isWebRTCSupported === false || connection.DetectRTC.hasMicrophone === false || connection.DetectRTC.hasWebcam === false || connection.DetectRTC.hasSpeakers === false) {
                    // alert('You dont fulfill requirements or your browser doesnt support WebRTC');
                    handleError("not-supported");
                    return;
                }

                connection.checkPresence(connection.roomid, function (isRoomExist, roomid, error) {
                    if (isRoomExist) {
                        handleError("room-exist");
                        return;
                    }

                    connection.open(connection.roomid, function (isRoomOpened, roomid, error) {
                        if (!isRoomOpened) {
                            handleError("not-open");
                            return;
                        }
                        else {
                            activeRoom();
                        }
                    });
                });
            });

            connection.autoCloseEntireSession = true;
            connection.maxParticipantsAllowed = 1000;
            connection.enableFileSharing = true;

            connection.session = {
                audio: true,
                video: true,
                data: true
            };

            connection.sdpConstraints.mandatory = {
                OfferToReceiveAudio: true,
                OfferToReceiveVideo: true
            };

            connection.onUserStatusChanged = function (event) {
                console.log(event);
                console.log(connection.getAllParticipants());
            };

            connection.onNewParticipant = function (participantId, userPreferences) {
                clearTimeout(requestTimeout); // no more timeout
                updateHeartbeat = setInterval(updateRoom, 15000);
                connection.acceptParticipationRequest(participantId, userPreferences);
            };

            connection.onopen = function (event) {
                connection.onUserStatusChanged(event);
            };

            connection.onclose = function (event) {
                connection.onUserStatusChanged(event);
            };

            connection.onerror = function (event) {
                handleError("an-error-occurred");
            };

            connection.onleave = function (event) {
                clearInterval(updateHeartbeat);
                requestSession();
            };

            connection.onmessage = function (event) {
                if (event.data.typing === true) {
                    showIndicator();
                    return;
                }

                if (event.data.typing === false) {
                    hideIndicator();
                    return;
                }

                if (event.data.chatMessage) {
                    appendMessage(event.data.chatMessage);
                    return;
                }
            };

            connection.onstream = function (event) {
                var element = null;

                if (event.type == 'local') {
                    element = ourVideo;
                    element.muted = true;
                    element.volume = 0;
                } else {
                    element = theirVideo;
                    element.controls = true;
                }
                element.srcObject = event.stream;
                element.setAttribute("streamid", event.streamid);
                element.play();

                connection.onUserStatusChanged(event);
            };

            connection.onstreamended = function (event) {
                var element = $(`video[streamid='${event.streamid}']`);
                element.removeAttr('srcObject');
                element.removeAttr('streamid');

                connection.onUserStatusChanged(event);
                return;
            };

            var keyPressTimer;
            var numberOfKeys = 0;
            $('.message-input').on("keyup", function (e) {
                var chatMessage = $('.message-input').val();
                if (!chatMessage || !chatMessage.replace(/ /g, '').length) {
                    connection.send({
                        typing: false
                    });
                }
                clearTimeout(keyPressTimer);
                numberOfKeys++;

                if (numberOfKeys % 3 === 0) {
                    connection.send({
                        typing: true
                    });
                }

                keyPressTimer = setTimeout(function () {
                    connection.send({
                        typing: false
                    });
                }, 1200);
            });

            $(".message-submit").on("click", function () {
                insertMessage();
            });

            function getFullName(userid) {
                var _userFullName = userid;
                if (connection.peers[userid] && connection.peers[userid].extra.userFullName) {
                    _userFullName = connection.peers[userid].extra.userFullName;
                }
                return _userFullName;
            }

            var recentFile;
            $('.message-upload').on("click", function () {
                var file = new FileSelector();
                file.selectSingleFile(function (file) {
                    recentFile = file;

                     if (connection.getAllParticipants().length >= 1) {
                         recentFile.userIndex = 0;
                         connection.send(file, connection.getAllParticipants()[recentFile.userIndex]);
                     }
                });
            });

            function getFileHTML(file) {
                var url = file.url || URL.createObjectURL(file);
                var attachment = '<a href="' + url + '" target="_blank" download="' + file.name + '"><b>' + file.name + '</b></a>';
                return attachment;
            }

            connection.onFileStart = function (file) {

            }

            connection.onFileProgress = function (file) {

            }

            connection.onFileEnd = function (file) {
                if (file.userid === connection.userid) {
                    insertMessage(getFileHTML(file));
                    // if (recentFile) {
                    //     recentFile.userIndex++;
                    //     var nextUserId = connection.getAllParticipants()[recentFile.userIndex];
                    //     if (nextUserId) {
                    //         connection.send(recentFile, nextUserId);
                    //     }
                    //     else {
                    //         recentFile = null;
                    //     }
                    // }
                    // else {
                    //     recentFile = null;
                    // }
                }
            };

            connection.autoSaveToDisk = false;

            window.addEventListener('unload', function () {
                endRoom();
            })

            function handleError(error) {
                clearTimeout(requestTimeout);
                clearInterval(updateHeartbeat);
                endRoom();
                console.error(error);
            }

            var requestTimeout;
            var updateHeartbeat;
            function activeRoom() {
                // active room then request session
                $.post('@Url.Action("ActiveRoom", "Room")', { id: connection.roomid })
                    .done(function (data) {
                        requestSession();
                        setInterval( function(){
                            $("#seconds").html(pad(++sec%60));
                            $("#minutes").html(pad(parseInt(sec/60,10)));
                        }, 1000);
                    })
                    .fail(function (data) {

                    });
            }

            function requestSession() {
                $.post('@Url.Action("RequestSession", "Room")', { id: connection.roomid })
                    .done(function (data) {
                        requestTimeout = setTimeout(requestSession, 60000);
                    })
                    .fail(function (data) {

                    });
            }

            function endRoom () {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("EndRoom", "Room")',
                    async: false,
                    data: { id: connection.roomid }
                });
            }

            function getSessions () {
                $.post('@Url.Action("GetSessions", "Room")', { id: connection.roomid })
                    .done(function (data) {
                        data = JSON.Parse(data);
                        for (var i = 0; i < data.length; i++) {
                            listSession.append(`<li class="list-group-items"><span>${data[i].UserName}</span><span>${data[i].Status}</span></li>`);
                        }
                    });
            }

            function updateRoom() {
                $.post("@Url.Action("HbUpdateRoom", "Room")", { id: connection.roomid })
                    .done(function (data) {
                    })
                    .fail(function (data) {
                        handleError("update-room-failed");
                    });
            }

            var sec = 0;
            function pad ( val ) { return val > 9 ? val : "0" + val; }

            $("#add-quota-btn").click(function (e) {
                e.preventDefault();
                $.post($("#add-quota-form").attr('action'), $("#add-quota-form").serialize())
                .done(function (data) {

                })
                .fail(function (data) {

                });
                $("#add-quota-form").trigger("reset");
                $("#modalAddQuota").modal('hide');

            });

            $("#end-button").on("click", function() {
                endRoom();
            });
        });
    </script>

</head>
<body>
    <div class="container-fluid">
        <div class="row video-container">
            <div class="col-9">
                <video autoplay id="their-video"></video>
                
            </div>
            <div class="col-3">
                <video autoplay id="our-video"></video>
                    <div class="card card-body">
                        <h5>Timer</h5>
                        <p>
                            <span id="minutes"></span>:<span id="seconds"></span>
                        </p>
                        <h5>Sessions</h5>
                        <style>
                            .list-group::-webkit-scrollbar {
                                display: none;
                            }
                        </style>
                        <ul class="list-group" style="overflow: scroll; max-height: 200px;" id="listsession"></ul>
                        <h5>Controls</h5>
                        <button class="btn btn-primary" data-toggle="modal" data-target="#modalAddQuota">
                            Add Quota
                        </button>
                        <button class="btn btn-danger" id="end-button">End Room</button>
                    </div>
            </div>
        </div>
        <section class="avenue-messenger">
            <div class="menu">
                <div class="button" id="fade-button">&mdash;</div>
            </div>
            <div class="chat">
                <div class="messages">
                    <div class="messages-content"></div>
                </div>
                <div class="message-box">
                    <textarea type="text" class="message-input" placeholder="Type message..."></textarea>
                    <button type="submit" class="message-submit">Send</button>
                    <button class="message-submit message-upload"><i class="fa fa-upload"></i></button>
                </div>
            </div>

        </section>
    </div>
    <div class="modal fade" id="modalAddQuota" tabindex="-1" role="dialog" aria-labelledby="modalAddQuotaTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalAddQuotaTitle">Add Quota</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="add-quota-form" action="@Url.Action("AddRoomQuota", "Room")" method="post">
                    <input type="hidden" name="id" value="@r.Id"/>
                    <div class="form-group">
                        <label for="quota" class="col-form-label">Quota</label>
                        <input class="form-control" type="number" name="Quota" id="quota" />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button id="add-quota-btn" type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>
</body>
</html>
