@{
    Layout = null;
    Doctor u = ViewData["User"] as Doctor;
    Room r = ViewData["Room"] as Room;
}

<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Room</title>


    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css">


    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css">
    <link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/malihu-custom-scrollbar-plugin/3.1.5/jquery.mCustomScrollbar.min.css'>
    <link rel="stylesheet" href="~/lib/jqueryui/themes/ui-lightness/jquery-ui.min.css">
    <link rel="stylesheet" href="~/css/room.css">
    <link rel="stylesheet" href="~/lib/toasty.js/dist/toasty.min.css" />


    <script src='~/lib/jquery/dist/jquery.min.js'></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/malihu-custom-scrollbar-plugin/3.1.5/jquery.mCustomScrollbar.concat.min.js'></script>


    <script src="~/lib/webrtc-adapter/adapter.min.js"></script>
    <script src="~/lib/rtcmulticonnection/dist/RTCMultiConnection.min.js"></script>
    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
    <script src="~/lib/socket.io/socket.io.js"></script>
    <script src="~/js/FileBufferReader.min.js"></script>
    <script src="~/lib/RecordRTC/RecordRTC.min.js"></script>
    <script>

        $(document).ready(function () {
            window.toast = new Toasty();

            var $messages = $('.messages-content'),
                d, h, m,
                i = 0;

            $messages.mCustomScrollbar();


            function updateScrollbar() {
                $messages.mCustomScrollbar("update").mCustomScrollbar('scrollTo', 'bottom', {
                    scrollInertia: 10,
                    timeout: 0
                });
            }

            function setDate() {
                d = new Date()
                m = d.getMinutes();
                $('<div class="timestamp">' + d.getHours() + ':' + m + '</div>').appendTo($('.message:last'));
            }

            function insertMessage() {
                var msg = $('.message-input').val();
                if ($.trim(msg) == '') {
                    return false;
                }
                $('<div class="message message-personal">' + msg + '</div>').appendTo($('.mCSB_container')).addClass('new');
                setDate();
                $('.message-input').val(null);
                updateScrollbar();

                connection.send({
                    chatMessage: msg
                });
            }

            function insertFile(msg) {
                $('<div class="message message-personal">' + msg + '</div>').appendTo($('.mCSB_container')).addClass('new');
                setDate();
                $('.message-input').val(null);
                updateScrollbar();
            }

            function appendMessage(msg) {
                $('<div class="message new">' + msg + '</div>').appendTo($('.mCSB_container')).addClass('new');
                setDate();
                updateScrollbar();
            }

            $(window).on('keydown', function (e) {
                if (e.which == 13) {
                    insertMessage();
                    return false;
                }
            })


            $('#fade-button').click(function (e) {
                e.preventDefault();
                $('#chat-box').fadeOut( "fast", function() {
                    $('#chat-bar').fadeIn("fast");
                });
            });

            $('#chat-bar').on("click", function(){
                $('#chat-bar').fadeOut( "fast", function() {
                    $('#chat-box').fadeIn("fast");
                });
            })

            var ourVideo = document.getElementById("our-video");
            var theirVideo = document.getElementById('their-video');
            var listSession = $('#listsession');

            // shim
            window.adapter = true;

            var connection = new RTCMultiConnection();
            //connection.socketURL = 'http://35.247.52.75:9000/';
            connection.socketURL = 'https://rtcmulticonnection.herokuapp.com:443/';

            connection.userid = @u.UserId;
            connection.roomid = @r.Id;
            connection.extra = {
                userId: connection.userid,
                roomId: connection.roomid,
                userFullName: "@u.User.FullName",
                isRoomMaster: true
            };
            connection.socketMessageEvent = "event-" + connection.roomid;

            connection.DetectRTC.load(function () {
                if (!connection.DetectRTC.isWebRTCSupported || !connection.DetectRTC.hasMicrophone || !connection.DetectRTC.hasWebcam || !connection.DetectRTC.hasSpeakers) {
                    alert('You dont fulfill requirements or your browser doesnt support WebRTC');
                    handleError("not-supported");
                    return;
                }

                if (navigator.connection &&
                    navigator.connection.type === 'cellular' &&
                    navigator.connection.downlinkMax <= 0.115) {
                    alert('Your connection is too slow for WebRTC to operate');
                    handleError("low-bandwidth");
                    return;
                }

                if (connection.DetectRTC.browser.name == "Safari") {
                    alert('You are using an unsupported browser. Please switch to Chrome or Firefox for the best performance');
                    handleError("unsupported");
                    return;
                }

                connection.checkPresence(connection.roomid, function (isRoomExist, roomid, error) {
                    if (isRoomExist) {
                        handleError("room-exist");
                        return;
                    }

                    connection.open(connection.roomid, function (isRoomOpened, roomid, error) {
                        if (!isRoomOpened) {
                            handleError("not-open");
                            return;
                        }
                        else {
                            activeRoom();
                        }
                    });
                });
            });

            connection.autoCloseEntireSession = true;
            connection.maxParticipantsAllowed = 1000;
            connection.enableFileSharing = true;

            connection.session = {
                audio: true,
                video: true,
                data: true
            };

            connection.mediaConstraints = {
                audio: {
                    mandatory: {
                        echoCancellation: true,
                        googAutoGainControl: true,
                        googNoiseSuppression: true,
                        googHighpassFilter: true,
                        googTypingNoiseDetection: true,
                        //googAudioMirroring: true
                    },
                    optional: []
                },
                video: true
            };

            if (connection.DetectRTC.browser.name == "Firefox") {
                connection.mediaConstraints = {
                    audio: true,
                    video: true
                };
            }

            connection.sdpConstraints.mandatory = {
                OfferToReceiveAudio: true,
                OfferToReceiveVideo: true
            };

            connection.onEvent = function (event) {
                console.log(event);
            };

            connection.onNewParticipant = function (participantId, userPreferences) {
                clearTimeout(requestTimeout); // no more timeout
                clearVoteButtons();

                $('#modalConfirmJoin').modal('show');
                $('#join-btn').on('click', function() {
                    updateRoom();
                    updateHeartbeat = setInterval(updateRoom, 15000);
                    connection.acceptParticipationRequest(participantId, userPreferences);
                })
            };

            connection.onopen = function (event) {
                connection.onEvent(event);
            };

            connection.onclose = function (event) {
                connection.onEvent(event);
            };

            connection.onerror = function (event) {
                handleError("an-error-occurred");
            };

            connection.onleave = function (event) {
                clearInterval(updateHeartbeat);
                requestSession();
            };

            connection.onmessage = function (event) {
                if (event.data.chatMessage) {
                    appendMessage(event.data.chatMessage);
                    return;
                }
            };

            var myStream;
            var theirStream;
            connection.onstream = function (event) {
                var element = null;

                if (event.type == 'local') {
                    myStream = event.stream;
                    element = ourVideo;
                    element.muted = true;
                    element.volume = 0;
                    element.controls = false;
                    addModeration();
                } else {
                    theirStream = event.stream;
                    element = theirVideo;
                    element.controls = false;
                }
                element.srcObject = event.stream;
                element.setAttribute("streamid", event.streamid);
                element.play();

                connection.onEvent(event);
            };

            connection.onstreamended = function (event) {
                var element = $(`video[streamid='${event.streamid}']`);
                element.removeAttr('src');
                element.removeAttr('srcObject');
                element.removeAttr('streamid');
                theirStream = null;
                connection.onEvent(event);
                window.toast.info("User left the room");
                return;
            };



            $(".message-submit").on("click", function () {
                insertMessage();
            });

            function getFullName() {
                _userFullName = connection.peers[0].extra.userFullName;
                return _userFullName;
            }

            $('.message-upload').on("click", function () {
                var file = new FileSelector();
                file.selectSingleFile(function (file) {
                    connection.send(file);
                    insertFile(getFileHTML(file));
                });
            });

            function getFileHTML(file) {
                var url = file.url || URL.createObjectURL(file);
                var attachment = '<a href="' + url + '" target="_blank" download="' + file.name + '"><b>' + file.name + '</b></a>';
                return attachment;
            }

            connection.onFileStart = function (file) {

            };

            connection.onFileProgress = function (file) {

            }

            connection.onFileEnd = function (file) {
                if (file.userid != connection.userid) {
                    appendMessage(getFileHTML(file));
                }
            };

            connection.autoSaveToDisk = false;

            window.addEventListener('unload', function () {
                endRoom();
            })

            function handleError(error) {
                clearTimeout(requestTimeout);
                clearInterval(updateHeartbeat);
                endRoom();
                window.toast.error(error);
                setTimeout(function () {
                    location.href = "/";
                }, 3000);
            }

            var requestTimeout;
            var updateHeartbeat;
            function activeRoom() {
                // active room then request session
                $.post('@Url.Action("ActiveRoom", "Room")', { id: connection.roomid })
                    .done(function (data) {
                        requestSession();
                        setInterval( function(){
                            $("#seconds").html(pad(++sec%60));
                            $("#minutes").html(pad(parseInt(sec/60,10)));
                        }, 1000);
                    })
                    .fail(function (data) {
                        handleError("api-error")
                    });
            }

            function requestSession() {
                $.post('@Url.Action("RequestSession", "Room")', { id: connection.roomid })
                    .done(function (data) {
                        requestTimeout = setTimeout(requestSession, 60000);
                    })
                    .fail(function (data) {
                        handleError("api-error");
                    });
            }

            function endRoom() {
                endModeration();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("EndRoom", "Room")',
                    async: false,
                    data: { id: connection.roomid }
                });
            }

            function getSessions () {
                $.get('@Url.Action("GetSessions", "Room")', { id: connection.roomid })
                    .done(function (data) {

                        data = JSON.parse(data.data);
                        listSession.html("");
                        for (var i = 0; i < data.length; i++) {
                            var clazz;
                            switch (data[i].Status) {
                                case "DONE": clazz = "badge-success";
                                    break;
                                case "PENDING": clazz = "badge-primary";
                                    break;
                                case "PROCESSING": clazz = "badge-warning";
                                    break;
                                default: clazz = "badge-info"
                                    break;
                            }
                            listSession.append(`<li class="list-group-item"><span class="float-left">${data[i].UserName}</span>
                            <span class="float-right badge ` + clazz + `">${data[i].Status}</span></li>`);
                        }
                    });
            }

            function updateRoom() {
                $.post("@Url.Action("HbUpdateRoom", "Room")", { id: connection.roomid })
                    .done(function (data) {
                        getSessions();
                    })
                    .fail(function (data) {
                        handleError("update-room-failed");
                    });
            }

            var recorder;
            var videoOnlyStream;
            window.blobs = [];
            function moderationProcess() {
                var form = new FormData();
                form.append("blob", window.blobs[0]); // ensure we dont miss any scenes
                window.blobs.shift();
                $.ajax({
                    url: '@Url.Action("Moderation","Video")',
                    data: form,
                    processData: false,
                    contentType: false,
                    type: 'POST',
                    success: function (data) {
                        console.log(data);
                    }
                });
            }

            function addModeration() {
                videoOnlyStream = new MediaStream();
                myStream.getVideoTracks().forEach(function (track) {
                    videoOnlyStream.addTrack(track);
                })
                recorder = RecordRTC(videoOnlyStream, {
                    type: 'video',
                    recorderType: MediaStreamRecorder,
                    mimeType: 'video/webm',
                    timeSlice: 30000, // slice the blob
                    ondataavailable: function (blob) {
                        window.blobs.push(blob);
                        moderationProcess();
                    }
                });
                recorder.startRecording();
            }

            function endModeration() {
                // recording
                recorder.stopRecording();
                videoOnlyStream.stop();
                videoOnlyStream = null;
                recorder = null;
                window.blobs.length = 0;
            }

            var sec = 0;
            function pad ( val ) { return val > 9 ? val : "0" + val; }

            $("#add-quota-btn").click(function (e) {
                e.preventDefault();
                $.post($("#add-quota-form").attr('action'), $("#add-quota-form").serialize())
                .done(function (data) {
                    window.toast.success("Success");
                })
                .fail(function (data) {
                    window.toast.error("An error occurred");
                });
                $("#add-quota-form").trigger("reset");
                $("#modalAddQuota").modal('hide');
            });

            $("#end-button").on("click", function() {
                endRoom();
                window.toast.warning("Your room will be closed after 3 seconds");
                setTimeout(function () {
                    location.href = "/";
                }, 3000);
            });

            $("#mute-room").on("click", function () {
                theirStream.getAudioTracks()[0].enabled = false;
                if (($("#unmute-room").is(":hidden"))) {
                    $("#unmute-room").prop("hidden", false);
                    $("#mute-room").prop("hidden", true);
                }
            });

            $("#unmute-room").on("click", function () {
                theirStream.getAudioTracks()[0].enabled = true;
                if (($("#mute-room").is(":hidden"))) {
                    $("#mute-room").prop("hidden", false);
                    $("#unmute-room").prop("hidden", true);
                }
            });
        });
    </script>

</head>
<body>
    <div class="container-fluid">
        <div class="row video-container">
            <div class="col-md-9 col-12" style="max-height:75%;">
                <video autoplay playsinline id="their-video"></video>
                <div class="row">
                    <div class="col-md-3 col-12">
                        <button class="btn btn-warning" id="mute-room" data-toggle="tooltip" data-placement="top" title="Mute-Room">
                            <i style="color:white" class="fa fa-volume-up" aria-hidden="true"></i>
                        </button>
                        <button hidden class="btn btn-warning" id="unmute-room" data-toggle="tooltip" data-placement="top" title="Unmute-Room">
                            <i style="color:white" class="fa fa-volume-off" aria-hidden="true"></i>
                        </button>
                        <button class="btn btn-danger" id="end-button" data-toggle="tooltip" data-placement="top" title="Close Room">
                            <i class="fa fa-times" aria-hidden="true"></i>
                        </button>
                    </div>
                    <div class="col-9" style="text-align: right;">
                        <a class="vote-btn disabled" onclick="voteCustomer(this, @r.Id)" data-toggle="tooltip" data-placement="top" title="Vote"><i class="fa fa-thumbs-o-up fa-2x text-muted"></i></a> &nbsp;
                        <a class="flag-btn disabled" onclick="flagCustomer(this, @r.Id)" data-toggle="tooltip" data-placement="top" title="Flag"><i class="fa fa-flag fa-2x text-muted"></i></a>

                        <script>
                            function voteCustomer(e, roomId) {
                                if (confirm("Do you want to vote for this customer? ")) {
                                    $.post("@Url.Action("VoteCustomerRoom", "Vote")", { roomId: roomId })
                                        .done(function (resp) {
                                            $(e).addClass("voted");
                                            $(e).children().removeClass("text-muted");
                                            $(e).next().addClass("disabled");
                                        })
                                        .fail(function (resp) {
                                            window.toast.error("No customer in room")
                                        });
                                    return false;
                                }
                            }

                            function flagCustomer(e, roomId) {
                                if (confirm("Do you want to report this customer? ")) {
                                    $.post("@Url.Action("FlagCustomerRoom", "Vote")", { roomId: roomId })
                                        .done(function (resp) {
                                            $(e).addClass("flagged");
                                            $(e).children().removeClass("text-muted");
                                            $(e).prev().addClass("disabled");
                                        })
                                        .fail(function (resp) {
                                            window.toast.error("No customer in room")
                                        });
                                }
                            }

                            function clearVoteButtons() {
                                $('.vote-btn').removeClass('voted disabled');                               
                                $('.flag-btn').removeClass('flagged disabled');                                
                                $('.flag-btn').children().addClass("text-muted");
                                $('.vote-btn').children().addClass("text-muted");                                
                            }
                        </script>
                    </div>
                </div>
            </div>
            <div class="col-md-3 col-12">
                <video autoplay playsinline id="our-video"></video>
                <style>
                    .control-box::-webkit-scrollbar {
                        display: none;
                    }
                </style>
                <div class="card card-body control-box" style="height:75%; overflow:scroll">
                    <h5>Room</h5>
                    <p>
                        <label>Title: </label>
                        <span>@r.Title</span>
                    </p>
                    <p class="d-inline">
                        <label>Quota: </label>
                        <span>@r.Quota</span>
                        <br />
                        <button class="btn btn-primary btn-sm" data-toggle="modal" data-target="#modalAddQuota">
                            <i class="fa fa-plus" aria-hidden="true"></i>
                            Add Quota
                        </button>
                    </p>
                    <h5>Timer</h5>
                    <h3>
                        <span id="minutes"></span>:<span id="seconds"></span>
                    </h3>
                    <h5 class="mt-2">Sessions</h5>
                    <style>
                        .list-group::-webkit-scrollbar {
                            display: none;
                        }
                    </style>
                    <ul class="list-group" style="overflow: scroll; max-height: 200px;" id="listsession"></ul>
                    
                </div>
            </div>
        </div>
        <section id="chat-box" class="avenue-messenger">
            <div class="menu">
                <div class="button" id="fade-button">&mdash;</div>
            </div>
            <div class="chat">
                <div class="chat-title" style="padding-top:20px; padding-bottom: 20px;">
                    <h1 class="chat-username">Chat Box</h1>
                </div>
                <div class="messages">
                    <div class="messages-content"></div>
                </div>
                <div class="message-box">
                    <textarea type="text" class="message-input" placeholder="Type message..."></textarea>
                    <button type="submit" class="message-submit">Send</button>
                    <button class="message-submit message-upload"><i class="fa fa-upload"></i></button>
                </div>
            </div>

        </section>

        <section id="chat-bar" class="avenue-messenger-widget" style="display: none; opacity: 0.7;">
            <div class="chat">
                <div class="chat-title" style="padding-top:20px; padding-bottom: 20px;">
                    <h1 class="chat-username">Chat Box</h1>
                </div>
            </div>
        </section>
    </div>
    <div class="modal fade" id="modalAddQuota" tabindex="-1" role="dialog" aria-labelledby="modalAddQuotaTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalAddQuotaTitle">Add Quota</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="add-quota-form" action="@Url.Action(" AddRoomQuota", "Room" )" method="post">
                        <input type="hidden" name="id" value="@r.Id" />
                        <div class="form-group">
                            <label for="quota" class="col-form-label">Quota</label>
                            <input class="form-control" type="number" name="Quota" id="quota" />
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button id="add-quota-btn" type="button" class="btn btn-primary">Save changes</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="modalConfirmJoin" tabindex="-1" role="dialog" aria-labelledby="modalConfirmJoinTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalConfirmJoinTitle">Confirm join ?</h5>
                </div>
                <div class="modal-body">
                    <p>Do you allow user to join ?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">No</button>
                    <button id="join-btn" type="button" class="btn btn-primary">Okay</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="modalAddNotes" tabindex="-1" role="dialog" aria-labelledby="modalAddNotesTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalAddNotesTitle">Add Notes</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body notes-container">
                    <form id="add-notes-form" action="@Url.Action("AddNotes","Note")" method="post">
                        <input type="hidden" name="id" value="@r.Id" />
                        <label>Zed</label>
                        <div class=" controls-symptom">
                            <div class="entry input-group">
                                <input class="form-control" name="symptom[]" type="text" placeholder="Type something" />
                                <span class="input-group-btn">
                                    <button class="btn btn-success btn-add" type="button">
                                        <i class="fa fa-plus"></i>
                                    </button>
                                </span>
                            </div>
                        </div>
                        <label>Qiyana</label>
                        <div class="controls-diagnose">
                            <div class="entry input-group">
                                <input class="form-control" name="diagnose[]" type="text" placeholder="Type something" />
                                <span class="input-group-btn">
                                    <button class="btn btn-success btn-add" type="button">
                                        <i class="fa fa-plus"></i>
                                    </button>
                                </span>
                            </div>
                        </div>
                        <label>Yasuo</label>
                        <div class=" controls-medicine">
                            <div class="entry input-group">
                                <input class="form-control" name="medicine[]" type="text" placeholder="Type medicine" />
                                <span class="input-group-btn">
                                    <button class="btn btn-success btn-add" type="button">
                                        <i class="fa fa-plus"></i>
                                    </button>
                                </span>
                            </div>
                        </div>
                        <label>Aatrox</label>
                        <div class="entry input-group">
                            <input class="form-control" name="note" type="text" placeholder="Note" />
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button id="add-notes-btn" type="button" class="btn btn-primary">Save</button>
                </div>
            </div>
        </div>
    </div>
    
    <script>
    $(".controls-symptom").on('click', '.btn-add', function(e)
    {
        e.preventDefault();

        var controlForm = $('.controls-symptom'),
            currentEntry = $(this).parents('.entry:first'),
            newEntry = $(currentEntry.clone()).appendTo(controlForm);

        newEntry.find('input').val('');
        controlForm.find('.entry:not(:last) .btn-add')
            .removeClass('btn-add').addClass('btn-remove')
            .removeClass('btn-success').addClass('btn-danger')
            .html('<i class="fa fa-minus"></i>');
    }).on('click', '.btn-remove', function(e)
    {
        $(this).parents('.entry:first').remove();

        e.preventDefault();
        return false;
    });
        $(".controls-diagnose").on('click', '.btn-add', function(e)
    {
        e.preventDefault();

        var controlForm = $('.controls-diagnose'),
            currentEntry = $(this).parents('.entry:first'),
            newEntry = $(currentEntry.clone()).appendTo(controlForm);

        newEntry.find('input').val('');
        controlForm.find('.entry:not(:last) .btn-add')
            .removeClass('btn-add').addClass('btn-remove')
            .removeClass('btn-success').addClass('btn-danger')
            .html('<i class="fa fa-minus"></i>');
    }).on('click', '.btn-remove', function(e)
    {
        $(this).parents('.entry:first').remove();

        e.preventDefault();
        return false;
    });
        $(".controls-medicine").on('click', '.btn-add', function(e)
    {
        e.preventDefault();

        var controlForm = $(".controls-medicine"),
            currentEntry = $(this).parents('.entry:first'),
            newEntry = $(currentEntry.clone()).appendTo(controlForm);

        newEntry.find('input').val('');
        controlForm.find('.entry:not(:last) .btn-add')
            .removeClass('btn-add').addClass('btn-remove')
            .removeClass('btn-success').addClass('btn-danger')
            .html('<i class="fa fa-minus"></i>');
    }).on('click', '.btn-remove', function(e)
    {
        $(this).parents('.entry:first').remove();

        e.preventDefault();
        return false;
    });

        $("#add-notes-btn").click(function (e) {
                e.preventDefault();
                $.post($("#add-notes-form").attr('action'), $("#add-notes-form").serialize())
                .done(function (data) {
                    window.toast.info("Save success");
                })
                .fail(function (data) {
                    window.toast.error("api-error");
                });
                $("#add-notes-form").trigger("reset");
                $("#modalAddNotes").modal('hide');
            });
        $('#modalAddNotes').on('hidden.bs.modal', function () {
            requestSession();
        }
    </script>

    <script src="~/lib/toasty.js/dist/toasty.min.js"></script>
</body>
</html>
